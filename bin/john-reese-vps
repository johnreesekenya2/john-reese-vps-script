#!/bin/bash

# VPS BY FSOCIETY - Main Executable
# Creator: John Reese
# Contact: wa.me/254745282166
# Email: fsocietycipherrevolt@gmail.com

set -euo pipefail

# Get script directory - handle both direct execution and symlink scenarios
if [[ -L "${BASH_SOURCE[0]}" ]]; then
    # Script is a symlink, resolve to actual location
    SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/.." && pwd)"
else
    # Script is executed directly
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
fi

# Fallback if script directory detection fails
if [[ ! -d "$SCRIPT_DIR/lib" ]]; then
    SCRIPT_DIR="$(pwd)"
fi

# Global configuration - must be set before sourcing libraries
export JOHN_REESE_VERSION="1.0"
export DATA_DIR="/etc/john-reese-vps"
export LOG_FILE="/var/log/john-reese-vps.log"
export SCRIPT_DIR

# Source core libraries
source "$SCRIPT_DIR/lib/colors.sh"
source "$SCRIPT_DIR/lib/logging.sh"
source "$SCRIPT_DIR/lib/os.sh"
source "$SCRIPT_DIR/lib/menu.sh"
source "$SCRIPT_DIR/lib/users.sh"
source "$SCRIPT_DIR/lib/services.sh"
source "$SCRIPT_DIR/lib/domains.sh"
source "$SCRIPT_DIR/lib/bandwidth.sh"
source "$SCRIPT_DIR/lib/ports.sh"
source "$SCRIPT_DIR/modules/protocols/protocols.sh"

# Main entry point
main() {
    local command="${1:-install}"
    
    case "$command" in
        "install")
            install_system
            ;;
        "menu"|".menu")
            check_installation
            check_expired_users
            show_main_menu
            ;;
        "uninstall")
            uninstall_system
            ;;
        "--version"|"-v")
            echo "VPS BY FSOCIETY v$JOHN_REESE_VERSION"
            show_creator_credits
            ;;
        "--help"|"-h")
            show_help
            ;;
        *)
            echo -e "${RED}❌ Unknown command: $command${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Show help
show_help() {
    echo -e "${BOLD}${CYAN}VPS BY FSOCIETY${NC}"
    echo -e "${WHITE}Usage: $0 [command]${NC}"
    echo
    echo -e "${WHITE}Commands:${NC}"
    echo -e "  ${GREEN}install${NC}     Install and configure the VPS management system"
    echo -e "  ${GREEN}menu${NC}        Show the main management menu"
    echo -e "  ${GREEN}uninstall${NC}   Remove the VPS management system"
    echo -e "  ${GREEN}--version${NC}   Show version information"
    echo -e "  ${GREEN}--help${NC}      Show this help message"
    echo
    show_creator_credits
}

# Check if system is installed
check_installation() {
    if [[ ! -d "$DATA_DIR" ]]; then
        echo -e "${RED}❌ VPS BY FSOCIETY System not installed!${NC}"
        echo -e "${WHITE}Run: $0 install${NC}"
        exit 1
    fi
    
    # Verify critical files exist
    local critical_files=(
        "$DATA_DIR/configs"
        "/etc/ssl/certs/john-reese.crt"
        "/usr/local/bin/menu"
    )
    
    local missing_files=()
    for file in "${critical_files[@]}"; do
        if [[ ! -e "$file" ]]; then
            missing_files+=("$file")
        fi
    done
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        echo -e "${YELLOW}⚠️ Installation appears incomplete. Missing files:${NC}"
        printf '  %s\n' "${missing_files[@]}"
        echo -e "${WHITE}Consider reinstalling: $0 install${NC}"
    fi
}

# Check system requirements
check_system_requirements() {
    echo -e "${BLUE}🔍 Checking system requirements...${NC}"
    
    # Check available disk space (need at least 500MB)
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local required_space=512000  # 500MB in KB
    
    if [[ $available_space -lt $required_space ]]; then
        echo -e "${RED}❌ Insufficient disk space. Need at least 500MB free.${NC}"
        echo -e "${WHITE}Available: $(($available_space / 1024))MB, Required: 500MB${NC}"
        exit 1
    fi
    
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        echo -e "${GREEN}✅ Running as root${NC}"
    else
        echo -e "${RED}❌ This script must be run as root${NC}"
        exit 1
    fi
    
    # Check internet connectivity
    if ! ping -c 1 google.com &>/dev/null && ! ping -c 1 8.8.8.8 &>/dev/null; then
        echo -e "${YELLOW}⚠️ No internet connectivity detected${NC}"
        echo -e "${WHITE}Some features may not work properly${NC}"
    else
        echo -e "${GREEN}✅ Internet connectivity OK${NC}"
    fi
    
    # Check if ports are available
    local ports_to_check=(80 443 2222 8443)
    local busy_ports=()
    
    for port in "${ports_to_check[@]}"; do
        if ss -tlnp | grep -q ":$port "; then
            busy_ports+=("$port")
        fi
    done
    
    if [[ ${#busy_ports[@]} -gt 0 ]]; then
        echo -e "${YELLOW}⚠️ The following ports are already in use: ${busy_ports[*]}${NC}"
        echo -e "${WHITE}Installation may fail or require manual configuration${NC}"
        echo -ne "${WHITE}Continue anyway? (y/N): ${NC}"
        read -r continue_install
        if [[ "$continue_install" != "y" && "$continue_install" != "Y" ]]; then
            echo -e "${BLUE}Installation cancelled${NC}"
            exit 0
        fi
    fi
    
    echo -e "${GREEN}✅ System requirements check completed${NC}"
}

# Validate installation
validate_installation() {
    echo -e "${BLUE}🔍 Validating installation...${NC}"
    
    local validation_errors=()
    
    # Check if nginx is running
    if ! systemctl is-active --quiet nginx; then
        validation_errors+=("Nginx service is not running")
    fi
    
    # Check if SSL certificates exist
    if [[ ! -f "/etc/ssl/certs/john-reese.crt" ]]; then
        validation_errors+=("SSL certificate not found")
    fi
    
    # Check if menu command is available
    if [[ ! -x "/usr/local/bin/menu" ]]; then
        validation_errors+=("Menu command not available")
    fi
    
    # Check if data directory is properly created
    if [[ ! -d "$DATA_DIR/configs" ]]; then
        validation_errors+=("Configuration directory missing")
    fi
    
    if [[ ${#validation_errors[@]} -eq 0 ]]; then
        echo -e "${GREEN}✅ Installation validation successful${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠️ Installation validation found issues:${NC}"
        printf '  %s\n' "${validation_errors[@]}"
        echo -e "${WHITE}The system may still work, but some features might be limited${NC}"
        return 1
    fi
}

# Install system
install_system() {
    echo -e "${BOLD}${CYAN}Installing VPS BY FSOCIETY Management System...${NC}"
    
    # Pre-installation checks
    check_root
    check_system_requirements
    detect_system
    
    # Installation steps with error handling
    echo -e "${BLUE}📁 Initializing directories...${NC}"
    init_directories || { echo -e "${RED}❌ Failed to initialize directories${NC}"; exit 1; }
    
    echo -e "${BLUE}📦 Installing packages...${NC}"
    install_packages || { echo -e "${RED}❌ Failed to install packages${NC}"; exit 1; }
    
    echo -e "${BLUE}🔧 Setting up services...${NC}"
    setup_services || { echo -e "${RED}❌ Failed to setup services${NC}"; exit 1; }
    
    echo -e "${BLUE}🚀 Initializing protocols...${NC}"
    init_protocol_configs || { echo -e "${RED}❌ Failed to initialize protocols${NC}"; exit 1; }
    
    echo -e "${BLUE}📋 Creating menu commands...${NC}"
    create_menu_commands || { echo -e "${RED}❌ Failed to create menu commands${NC}"; exit 1; }
    
    # Post-installation validation
    validate_installation
    
    echo -e "${GREEN}✅ Installation completed successfully!${NC}"
    echo -e "${WHITE}Use 'menu' or '.menu' to access the management interface.${NC}"
    echo -e "${WHITE}Installation log: $LOG_FILE${NC}"
    show_creator_credits
    
    # Start menu immediately if interactive
    if [[ -t 0 ]]; then
        echo -e "${BLUE}🎯 Starting management interface...${NC}"
        sleep 2
        show_main_menu
    fi
}

# Uninstall system
uninstall_system() {
    echo -e "${RED}🧹 Uninstalling VPS BY FSOCIETY System${NC}"
    echo -e "${YELLOW}⚠️ WARNING: This will remove all data and configurations!${NC}"
    echo -ne "${WHITE}Are you sure? (yes/no): ${NC}"
    read confirm
    
    if [[ "$confirm" != "yes" ]]; then
        echo -e "${BLUE}🔵 Operation cancelled.${NC}"
        exit 0
    fi
    
    remove_services
    cleanup_files
    
    echo -e "${GREEN}✅ System uninstalled successfully!${NC}"
    show_creator_credits
}

# Create menu commands
create_menu_commands() {
    cat > /usr/local/bin/menu << EOF
#!/bin/bash
exec bash "$SCRIPT_DIR/bin/john-reese-vps" menu
EOF
    chmod +x /usr/local/bin/menu
    
    # Create .menu command
    ln -sf /usr/local/bin/menu /usr/local/bin/.menu
}

# Run main function with all arguments
main "$@"
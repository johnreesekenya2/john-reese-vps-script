#!/bin/bash

# JOHN REESE VPS - GitHub API Client
# Replaces git operations with GitHub API calls
# Creator: John Reese

set -euo pipefail

# Configuration
GITHUB_API_URL="https://api.github.com"
GITHUB_RAW_URL="https://raw.githubusercontent.com"
REPO_OWNER="johnreesekenya2"
REPO_NAME="john-reese-vps-script"
BRANCH="main"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $*${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $*${NC}"
}

log_warn() {
    echo -e "${YELLOW}‚ö†Ô∏è $*${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $*${NC}"
}

# Check if GitHub token is available
check_github_token() {
    if [[ -z "${GITHUB_TOKEN:-}" ]]; then
        log_error "GITHUB_TOKEN environment variable is required"
        echo "Please set your GitHub Personal Access Token:"
        echo "export GITHUB_TOKEN=your_token_here"
        exit 1
    fi
}

# Make authenticated GitHub API request
github_api_request() {
    local method="$1"
    local endpoint="$2"
    local data="${3:-}"
    
    local curl_args=(-X "$method" -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json")
    
    if [[ -n "$data" ]]; then
        curl_args+=(-H "Content-Type: application/json" -d "$data")
    fi
    
    curl -s "${curl_args[@]}" "$GITHUB_API_URL$endpoint"
}

# Download file from GitHub repository
download_file() {
    local file_path="$1"
    local output_path="${2:-$file_path}"
    
    log_info "Downloading $file_path from GitHub..."
    
    local download_url="$GITHUB_RAW_URL/$REPO_OWNER/$REPO_NAME/$BRANCH/$file_path"
    
    if curl -fsSL "$download_url" -o "$output_path"; then
        log_success "Downloaded $file_path to $output_path"
        return 0
    else
        log_error "Failed to download $file_path"
        return 1
    fi
}

# Upload file to GitHub repository
upload_file() {
    local file_path="$1"
    local commit_message="${2:-Update $file_path}"
    
    if [[ ! -f "$file_path" ]]; then
        log_error "File not found: $file_path"
        return 1
    fi
    
    log_info "Uploading $file_path to GitHub..."
    
    # Get file content as base64
    local content=$(base64 -w 0 "$file_path")
    
    # Check if file already exists to get SHA
    local sha_response=$(github_api_request "GET" "/repos/$REPO_OWNER/$REPO_NAME/contents/$file_path" 2>/dev/null || echo '{}')
    local existing_sha=$(echo "$sha_response" | jq -r '.sha // empty')
    
    # Prepare JSON data
    local json_data=$(jq -n \
        --arg message "$commit_message" \
        --arg content "$content" \
        --arg branch "$BRANCH" \
        --argjson sha "$(if [[ -n "$existing_sha" ]]; then echo "\"$existing_sha\""; else echo null; fi)" \
        '{
            message: $message,
            content: $content,
            branch: $branch
        } + (if $sha then {sha: $sha} else {} end)')
    
    # Upload file
    local response=$(github_api_request "PUT" "/repos/$REPO_OWNER/$REPO_NAME/contents/$file_path" "$json_data")
    
    if echo "$response" | jq -e '.commit' > /dev/null 2>&1; then
        local commit_url=$(echo "$response" | jq -r '.commit.html_url')
        log_success "Uploaded $file_path successfully"
        log_info "Commit: $commit_url"
        return 0
    else
        log_error "Failed to upload $file_path"
        echo "$response" | jq -r '.message // "Unknown error"'
        return 1
    fi
}

# Upload entire directory to GitHub
upload_directory() {
    local dir_path="$1"
    local commit_message="${2:-Update directory $dir_path}"
    
    if [[ ! -d "$dir_path" ]]; then
        log_error "Directory not found: $dir_path"
        return 1
    fi
    
    log_info "Uploading directory $dir_path to GitHub..."
    
    local success_count=0
    local error_count=0
    
    find "$dir_path" -type f | while read -r file; do
        # Skip hidden files and common ignore patterns
        if [[ $(basename "$file") =~ ^\. ]] || [[ "$file" =~ \.(log|tmp|backup)$ ]]; then
            continue
        fi
        
        local relative_path="${file#$dir_path/}"
        if upload_file "$file" "Update $relative_path via API"; then
            ((success_count++))
        else
            ((error_count++))
        fi
        
        # Add small delay to avoid rate limiting
        sleep 0.5
    done
    
    log_success "Directory upload completed: $success_count files uploaded, $error_count errors"
}

# Create a new release
create_release() {
    local version="$1"
    local release_name="${2:-Release $version}"
    local description="${3:-Automated release via GitHub API}"
    local prerelease="${4:-false}"
    
    log_info "Creating release $version..."
    
    local json_data=$(jq -n \
        --arg tag "$version" \
        --arg name "$release_name" \
        --arg body "$description" \
        --argjson prerelease "$prerelease" \
        --arg branch "$BRANCH" \
        '{
            tag_name: $tag,
            target_commitish: $branch,
            name: $name,
            body: $body,
            draft: false,
            prerelease: $prerelease
        }')
    
    local response=$(github_api_request "POST" "/repos/$REPO_OWNER/$REPO_NAME/releases" "$json_data")
    
    if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
        local release_url=$(echo "$response" | jq -r '.html_url')
        log_success "Release $version created successfully"
        log_info "Release URL: $release_url"
        return 0
    else
        log_error "Failed to create release $version"
        echo "$response" | jq -r '.message // "Unknown error"'
        return 1
    fi
}

# Get repository information
get_repo_info() {
    log_info "Getting repository information..."
    
    local response=$(github_api_request "GET" "/repos/$REPO_OWNER/$REPO_NAME")
    
    if echo "$response" | jq -e '.id' > /dev/null 2>&1; then
        echo "$response" | jq -r '
            "Repository: \(.full_name)",
            "Description: \(.description // "No description")",
            "Stars: \(.stargazers_count)",
            "Forks: \(.forks_count)",
            "Language: \(.language // "Not specified")",
            "Created: \(.created_at)",
            "Updated: \(.updated_at)",
            "Clone URL: \(.clone_url)",
            "Size: \(.size)KB"
        '
        return 0
    else
        log_error "Failed to get repository information"
        echo "$response" | jq -r '.message // "Unknown error"'
        return 1
    fi
}

# Download entire repository as zip
download_repo() {
    local output_path="${1:-${REPO_NAME}.zip}"
    
    log_info "Downloading repository as ZIP archive..."
    
    local download_url="$GITHUB_API_URL/repos/$REPO_OWNER/$REPO_NAME/zipball/$BRANCH"
    
    if curl -fsSL -H "Authorization: token $GITHUB_TOKEN" "$download_url" -o "$output_path"; then
        log_success "Repository downloaded to $output_path"
        return 0
    else
        log_error "Failed to download repository"
        return 1
    fi
}

# Show help
show_help() {
    echo -e "${BOLD}${CYAN}JOHN REESE VPS - GitHub API Client${NC}"
    echo -e "${WHITE}Usage: $0 <command> [arguments]${NC}"
    echo
    echo -e "${WHITE}Commands:${NC}"
    echo -e "  ${GREEN}download <file_path> [output_path]${NC}     Download a file from repository"
    echo -e "  ${GREEN}upload <file_path> [commit_message]${NC}    Upload a file to repository"
    echo -e "  ${GREEN}upload-dir <dir_path> [commit_message]${NC} Upload entire directory"
    echo -e "  ${GREEN}release <version> [name] [description]${NC}  Create a new release"
    echo -e "  ${GREEN}repo-info${NC}                              Get repository information"
    echo -e "  ${GREEN}download-repo [output_path]${NC}            Download repository as ZIP"
    echo -e "  ${GREEN}--help${NC}                                 Show this help message"
    echo
    echo -e "${WHITE}Environment Variables:${NC}"
    echo -e "  ${GREEN}GITHUB_TOKEN${NC}    GitHub Personal Access Token (required)"
    echo
    echo -e "${WHITE}Examples:${NC}"
    echo -e "  $0 download bin/john-reese-vps ./john-reese-vps"
    echo -e "  $0 upload ./new-script.sh \"Add new script\""
    echo -e "  $0 upload-dir ./my-project \"Upload project files\""
    echo -e "  $0 release v1.0.1 \"Version 1.0.1\" \"Bug fixes and improvements\""
    echo
    echo -e "${CYAN}üìû Support: wa.me/254745282166${NC}"
}

# Main function
main() {
    local command="${1:---help}"
    
    case "$command" in
        "download")
            check_github_token
            download_file "${2:-}" "${3:-}"
            ;;
        "upload")
            check_github_token
            upload_file "${2:-}" "${3:-Update file via API}"
            ;;
        "upload-dir")
            check_github_token
            upload_directory "${2:-}" "${3:-Update directory via API}"
            ;;
        "release")
            check_github_token
            create_release "${2:-}" "${3:-}" "${4:-}" "${5:-false}"
            ;;
        "repo-info")
            check_github_token
            get_repo_info
            ;;
        "download-repo")
            check_github_token
            download_repo "${2:-}"
            ;;
        "--help"|"-h"|"help")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $command${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"